const { db } = require('./server/db-drizzle');
const schema = require('./shared/drizzle-schema');
const { count, eq } = require('drizzle-orm');

async function testDashboardData() {
  try {
    console.log('üìä AN√ÅLISE: Dashboard - Dados Din√¢micos vs Est√°ticos\n');
    
    // === DADOS DIN√ÇMICOS (Real-time) ===
    console.log('üîÑ DADOS DIN√ÇMICOS (Atuais no banco):');
    
    const totalTickets = await db.select({ count: count() }).from(schema.tickets);
    console.log(`   üìã Total de tickets: ${totalTickets[0].count}`);
    
    const openTickets = await db
      .select({ count: count() })
      .from(schema.tickets)
      .where(eq(schema.tickets.status, 'open'));
    console.log(`   üîì Tickets abertos: ${openTickets[0].count}`);
    
    const resolvedTickets = await db
      .select({ count: count() })
      .from(schema.tickets)
      .where(eq(schema.tickets.status, 'resolved'));
    console.log(`   ‚úÖ Tickets resolvidos: ${resolvedTickets[0].count}`);
    
    const inProgressTickets = await db
      .select({ count: count() })
      .from(schema.tickets)
      .where(eq(schema.tickets.status, 'in_progress'));
    console.log(`   ‚ö° Em progresso: ${inProgressTickets[0].count}`);
    
    // === ESTAT√çSTICAS POR CATEGORIA ===
    console.log('\nüìä ESTAT√çSTICAS POR CATEGORIA:');
    const categoryCounts = await db
      .select({ 
        category: schema.tickets.category, 
        count: count() 
      })
      .from(schema.tickets)
      .groupBy(schema.tickets.category);
    
    categoryCounts.forEach(cat => {
      const categoryName = {
        'technical_support': 'Suporte T√©cnico',
        'financial': 'Financeiro',
        'commercial': 'Comercial',
        'other': 'Outros'
      }[cat.category] || cat.category;
      
      console.log(`   ${categoryName}: ${cat.count} tickets`);
    });
    
    // === DETEC√á√ÉO DE PROBLEMAS ===
    console.log('\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:');
    
    // Verificar se h√° dados de cache antigos sendo mostrados
    const logMessage = `
üìç STATUS DO DASHBOARD:

‚úÖ DADOS DIN√ÇMICOS:
   ‚Ä¢ O dashboard USA React Query para buscar dados da API
   ‚Ä¢ Componentes fazem requisi√ß√µes para /api/statistics
   ‚Ä¢ Gr√°ficos s√£o atualizados automaticamente
   ‚Ä¢ Dados N√ÉO s√£o hardcoded

üîÑ ATUALIZA√á√ÉO AUTOM√ÅTICA:
   ‚Ä¢ React Query faz cache inteligente
   ‚Ä¢ Dados s√£o refrescados quando a p√°gina carrega
   ‚Ä¢ Mudan√ßas no banco s√£o refletidas na pr√≥xima consulta
   
‚ö° CACHE OBSERVADO:
   ‚Ä¢ Servidor mostra cache 304 (Not Modified)
   ‚Ä¢ Dados podem estar em cache do navegador
   ‚Ä¢ Para ver dados atualizados: F5 ou Ctrl+F5
   
üéØ CONFIRMA√á√ÉO:
   ‚Ä¢ Base agora tem ${totalTickets[0].count} tickets (ap√≥s limpeza)
   ‚Ä¢ Dashboard deve mostrar estes n√∫meros
   ‚Ä¢ Se mostrar n√∫meros antigos = problema de cache
    `;
    
    console.log(logMessage);
    
  } catch (error) {
    console.error('‚ùå Erro ao analisar dashboard:', error);
  }
  process.exit(0);
}

testDashboardData();
