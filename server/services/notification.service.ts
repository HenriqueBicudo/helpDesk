import { drizzle } from 'drizzle-orm/postgres-js';
import { and, gte, eq, sql, like } from 'drizzle-orm';
import postgres from 'postgres';
import { ticketInteractions } from '../../shared/drizzle-schema';

/**
 * Servi√ßo de Notifica√ß√£o e A√ß√µes Autom√°ticas
 * 
 * Respons√°vel por criar intera√ß√µes autom√°ticas nos tickets
 * quando eventos de SLA ocorrem (alertas e viola√ß√µes)
 */
export class NotificationService {
  private db: ReturnType<typeof drizzle>;
  
  // ID do usu√°rio do sistema para intera√ß√µes autom√°ticas
  private readonly SYSTEM_USER_ID = null; // Pode ser configurado para um usu√°rio espec√≠fico
  
  constructor() {
    // Inicializar conex√£o com banco usando vari√°veis de ambiente
    const connectionString = process.env.DATABASE_URL || 
      'postgresql://helpdesk_user:helpdesk_password@localhost:5432/helpdesk';
    
    const client = postgres(connectionString);
    this.db = drizzle(client);
  }

  /**
   * Cria uma intera√ß√£o de alerta de SLA no ticket
   * 
   * @param ticketId - ID do ticket
   * @param alertType - Tipo de alerta ('warning' ou 'breach')
   * @param customMessage - Mensagem personalizada (opcional)
   */
  public async createSlaAlertInteraction(
    ticketId: number, 
    alertType: 'warning' | 'breach',
    customMessage?: string
  ): Promise<void> {
    
    console.log(`üìù Criando intera√ß√£o de SLA para ticket ${ticketId} - Tipo: ${alertType}`);
    
    try {
      // Gerar mensagem padr√£o se n√£o foi fornecida
      const message = customMessage || this.generateStandardMessage(alertType);
      
      // Criar a intera√ß√£o no banco de dados
      const interaction = await this.db
        .insert(ticketInteractions)
        .values({
          ticketId: ticketId,
          userId: this.SYSTEM_USER_ID, // Sistema autom√°tico
          type: 'internal_note', // Nota interna autom√°tica
          content: message,
          isInternal: true, // Vis√≠vel apenas para a equipe
          createdAt: new Date()
        })
        .returning();
      
      console.log(`‚úÖ Intera√ß√£o de SLA criada: ID ${interaction[0]?.id}`);
      
      // Log da a√ß√£o para auditoria
      await this.logSlaEvent(ticketId, alertType, message);
      
    } catch (error) {
      console.error(`‚ùå Erro ao criar intera√ß√£o de SLA para ticket ${ticketId}:`, error);
      throw error;
    }
  }

  /**
   * Cria m√∫ltiplas intera√ß√µes em lote (otimiza√ß√£o para muitos tickets)
   * 
   * @param notifications - Array de notifica√ß√µes a serem criadas
   */
  public async createBulkSlaInteractions(
    notifications: Array<{
      ticketId: number;
      alertType: 'warning' | 'breach';
      message: string;
    }>
  ): Promise<void> {
    
    if (notifications.length === 0) {
      return;
    }
    
    console.log(`üìù Criando ${notifications.length} intera√ß√µes de SLA em lote...`);
    
    try {
      // Preparar dados para inser√ß√£o em lote
      const interactionsData = notifications.map(notification => ({
        ticketId: notification.ticketId,
        userId: this.SYSTEM_USER_ID,
        type: 'internal_note' as const,
        content: notification.message,
        isInternal: true,
        createdAt: new Date()
      }));
      
      // Inser√ß√£o em lote para melhor performance
      const createdInteractions = await this.db
        .insert(ticketInteractions)
        .values(interactionsData)
        .returning();
      
      console.log(`‚úÖ ${createdInteractions.length} intera√ß√µes de SLA criadas em lote`);
      
    } catch (error) {
      console.error('‚ùå Erro ao criar intera√ß√µes de SLA em lote:', error);
      throw error;
    }
  }

  /**
   * Cria uma notifica√ß√£o de escala√ß√£o autom√°tica
   * 
   * @param ticketId - ID do ticket
   * @param reason - Motivo da escala√ß√£o
   * @param previousPriority - Prioridade anterior
   * @param newPriority - Nova prioridade
   */
  public async createEscalationNotification(
    ticketId: number,
    reason: string,
    previousPriority?: string,
    newPriority?: string
  ): Promise<void> {
    
    console.log(`üìà Criando notifica√ß√£o de escala√ß√£o para ticket ${ticketId}`);
    
    try {
      const escalationMessage = this.generateEscalationMessage(
        reason, 
        previousPriority, 
        newPriority
      );
      
      await this.db
        .insert(ticketInteractions)
        .values({
          ticketId: ticketId,
          userId: this.SYSTEM_USER_ID,
          type: 'internal_note',
          content: escalationMessage,
          isInternal: true,
          createdAt: new Date()
        });
      
      console.log(`‚úÖ Notifica√ß√£o de escala√ß√£o criada para ticket ${ticketId}`);
      
    } catch (error) {
      console.error(`‚ùå Erro ao criar notifica√ß√£o de escala√ß√£o:`, error);
      throw error;
    }
  }

  /**
   * Gera mensagem padr√£o para alertas de SLA
   * 
   * @param alertType - Tipo de alerta
   * @returns Mensagem formatada
   */
  private generateStandardMessage(alertType: 'warning' | 'breach'): string {
    const timestamp = new Date().toLocaleString('pt-BR');
    
    switch (alertType) {
      case 'warning':
        return `üîî **ALERTA DE SLA** | ${timestamp}
        
O prazo de SLA deste ticket est√° pr√≥ximo do vencimento. 

‚ö†Ô∏è **A√ß√£o necess√°ria**: Verifique o andamento e tome as medidas necess√°rias para cumprir o prazo acordado.

ü§ñ *Mensagem gerada automaticamente pelo sistema de monitoramento de SLA*`;

      case 'breach':
        return `üö® **VIOLA√á√ÉO DE SLA** | ${timestamp}

**ATEN√á√ÉO: O SLA deste ticket foi violado!**

‚ùå **Status**: Prazo ultrapassado
üéØ **A√ß√£o requerida**: Resolu√ß√£o URGENTE necess√°ria
üìä **Impacto**: Poss√≠vel impacto no acordo de n√≠vel de servi√ßo

ü§ñ *Alerta autom√°tico do sistema de monitoramento de SLA*`;

      default:
        return `üìã **EVENTO DE SLA** | ${timestamp}

Um evento relacionado ao SLA foi detectado para este ticket.

ü§ñ *Notifica√ß√£o autom√°tica do sistema*`;
    }
  }

  /**
   * Gera mensagem de escala√ß√£o autom√°tica
   * 
   * @param reason - Motivo da escala√ß√£o
   * @param previousPriority - Prioridade anterior
   * @param newPriority - Nova prioridade
   * @returns Mensagem formatada
   */
  private generateEscalationMessage(
    reason: string,
    previousPriority?: string,
    newPriority?: string
  ): string {
    const timestamp = new Date().toLocaleString('pt-BR');
    
    let message = `üìà **ESCALA√á√ÉO AUTOM√ÅTICA** | ${timestamp}

üö® **Motivo**: ${reason}`;

    if (previousPriority && newPriority) {
      message += `
üîÑ **Prioridade alterada**: ${previousPriority.toUpperCase()} ‚Üí ${newPriority.toUpperCase()}`;
    }

    message += `

‚ö° **A√ß√£o imediata necess√°ria**: Este ticket requer aten√ß√£o urgente da equipe.

ü§ñ *Escala√ß√£o autom√°tica do sistema de monitoramento de SLA*`;

    return message;
  }

  /**
   * Registra evento de SLA para auditoria e relat√≥rios
   * 
   * @param ticketId - ID do ticket
   * @param eventType - Tipo de evento
   * @param message - Mensagem do evento
   */
  private async logSlaEvent(
    ticketId: number,
    eventType: 'warning' | 'breach',
    message: string
  ): Promise<void> {
    
    try {
      // Log estruturado para poss√≠vel integra√ß√£o futura com sistema de m√©tricas
      const logEntry = {
        timestamp: new Date().toISOString(),
        ticketId,
        eventType,
        service: 'SlaMonitorService',
        action: 'alert_created',
        details: {
          messageLength: message.length,
          automated: true
        }
      };
      
      // Log para console (pode ser integrado com sistema de logs mais avan√ßado)
      console.log(`üìä [SLA_EVENT] ${JSON.stringify(logEntry)}`);
      
      // TODO: Integra√ß√£o futura com sistema de m√©tricas (ex: Prometheus, DataDog)
      // await this.metricsService.recordSlaEvent(logEntry);
      
    } catch (error) {
      console.error('‚ùå Erro ao registrar evento de SLA:', error);
      // N√£o falha a opera√ß√£o principal se log falhar
    }
  }

  /**
   * Envia notifica√ß√£o por email (implementa√ß√£o futura)
   * 
   * @param ticketId - ID do ticket
   * @param recipients - Lista de emails
   * @param subject - Assunto do email
   * @param content - Conte√∫do do email
   */
  public async sendEmailNotification(
    ticketId: number,
    recipients: string[],
    subject: string,
    content: string
  ): Promise<void> {
    
    console.log(`üìß [FUTURO] Email de SLA para ticket ${ticketId} seria enviado para:`, recipients);
    
    // TODO: Implementar integra√ß√£o com servi√ßo de email
    // Poss√≠veis integra√ß√µes: SendGrid, AWS SES, Nodemailer
    /*
    try {
      await this.emailService.send({
        to: recipients,
        subject: `[HELPDESK] ${subject} - Ticket #${ticketId}`,
        html: content,
        metadata: {
          ticketId,
          type: 'sla_alert'
        }
      });
      
      console.log(`‚úÖ Email de SLA enviado para ticket ${ticketId}`);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar email de SLA:`, error);
    }
    */
  }

  /**
   * Verifica se uma intera√ß√£o de SLA j√° foi criada recentemente
   * (evita spam de notifica√ß√µes)
   * 
   * @param ticketId - ID do ticket
   * @param alertType - Tipo de alerta
   * @param timeWindowMinutes - Janela de tempo em minutos
   * @returns true se j√° existe intera√ß√£o recente
   */
  public async hasRecentSlaInteraction(
    ticketId: number,
    alertType: 'warning' | 'breach',
    timeWindowMinutes: number = 30
  ): Promise<boolean> {
    
    try {
      const timeAgo = new Date(Date.now() - timeWindowMinutes * 60 * 1000);
      
      const recentInteractions = await this.db
        .select()
        .from(ticketInteractions)
        .where(
          and(
            eq(ticketInteractions.ticketId, ticketId),
            eq(ticketInteractions.type, 'internal_note'),
            like(ticketInteractions.content, `%${alertType.toUpperCase()}%`),
            gte(ticketInteractions.createdAt, timeAgo)
          )
        )
        .limit(1);
      
      return recentInteractions.length > 0;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar intera√ß√µes recentes:', error);
      return false; // Em caso de erro, permite criar nova intera√ß√£o
    }
  }
}

export default NotificationService;
